// NodeJS 설치
// Nodemon : npm install -g nodemon
// Postman : https://www.postman.com/downloads/

// Protocol : 원거리 통신 장비에서 메세지를 주고 받을 때 사용하는 규칙과 양식의 체계
// Module : 독립된 기능을 하는 하나의 소프트웨어

// # HTTP
// - Hyper Text Transfer Protocol
// - WWW 상에서 정보를 주고받을 수 있는 프로토콜
// - TCP와 UDP를 사용하며 80번 포트를 사용한다.
// - 유저가 어떠한 홈페이지나 앱을 통해 서버에 있는 자료를 요청할때에 주로 사용하는 통식 방식
// - header : 전송하는 데이터의 타입 등을 규정합니다.
// - body : 실제로 데이터를 전송하는 부분
// - request : 클라이언트(프론트엔드)로부터 전달받은 요청
// - response : 클라이언트로 전달하는 응답


// # WWW
// - 인터넷을 통해 사람들이 정보를 공유할 수 있는 전 세계적인 정보 공간
// - 아래와 같은 세가지의 기능으로 WWW의 특성을 정의 할 수 있다.
// - URL이라는 위치 지정 방식
// - 서버 등 웹 자원에 접근할 수 있게 하는 프로토콜 (HTTP)
// - 유저가 웹 자원을 검색하고 확인할 수 있게 도와주는 언어들 (HTML)

// # IP Address
// - IP : Internet Protocol Address란 네트워크 상에서 디바이스 (네트워크 장치)들이 서로를 인식하기 위한 주소 체계입니다.
// - 127.0.0.1은 로컬 주소를 이용하며, 로컬 컴퓨터 (즉 지금 내 컴퓨터!)로 통하는 주소를 의미 합니다.
// - 로컬 아이피는 일명 루트백 아이피라고 합니다.

// # Port
// - 네트워크를 식별하는 단위 (0~65535)
// - 일반적으로 약속된 포트는 아래와 같습니다.    
// - 22 : SSH    
// - 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해 주는 응용 프로그램 또는 프로토콜
// - 강력한 인증방법을 사용할 수 있고, 모든 통신은 암호와 되어 전송된다.
// - 나중에 AWS 등의 서버를 조작할때, GUI라고 하는 관리자 페이지 보다 SSH가 더 익숙한 자신을 발견하게 되실 겁니다.
// - 80 : 월드 와이드 웹 HTTP
// - 443 : TLS/SSL 방식의 HTTP
// - SSL (Secure Sockets Laye)
// - TLS (Transport Layer Security) : SSL v3.0 을 표준화 한 것이 TLS 1.0
// - 데이터의 전송 과정에서 서버에 대한 인증 및 암호화를 통한 보안 강화 통신 방식

// # HTTP_Method
// GET
// POST
// PUT
// DELETE

// # Restful API
// - Representational State Transfer
// - 클라이언트/서버 구조: 각 앱은 인터페이스로 분리되어야 하며, 서로에 대한 의존성이 낮아야 합니다.
// - 무상태(Stateless): 흔히 세션과 쿠키라고 하는 프론트엔드의 상태를 서버에 저장하지 않는 것을 의미합니다.
// - 캐시 처리 가능(Cacheable): 데이터를 캐싱하여 전체 응답시간을 줄이고 서버의 성능을 높여야 합니다.
// - 계층화(Layered System): 클라이언트는 API를 통해 자원에 접근하지만, 이 자원이 서버의 어디에 존재하는 지 알 수 있도록 여러 단계를 만들어야 합니다.
// - 인터페이스 일관성: 구조를 단순화 시키고 통일하며, 특정 언어나 기술에 종속되지 않습니다.
